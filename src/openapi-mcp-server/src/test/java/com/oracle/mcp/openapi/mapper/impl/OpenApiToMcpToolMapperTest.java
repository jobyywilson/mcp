/*
 * --------------------------------------------------------------------------
 * Copyright (c) 2025, Oracle and/or its affiliates.
 * Licensed under the Universal Permissive License v1.0 as shown at http://oss.oracle.com/licenses/upl.
 * --------------------------------------------------------------------------
 */
package com.oracle.mcp.openapi.mapper.impl;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.oracle.mcp.openapi.cache.McpServerCacheService;
import com.oracle.mcp.openapi.constants.ErrorMessage;
import com.oracle.mcp.openapi.exception.McpServerToolInitializeException;
import com.oracle.mcp.openapi.model.override.ToolOverridesConfig;
import io.modelcontextprotocol.spec.McpSchema;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.List;
import java.util.Map;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.verify;

class OpenApiToMcpToolMapperTest {

    private McpServerCacheService cacheService;
    private OpenApiToMcpToolMapper mapper;
    private ObjectMapper objectMapper;

    @BeforeEach
    void setUp() {
        cacheService = mock(McpServerCacheService.class);
        mapper = new OpenApiToMcpToolMapper(cacheService);
        objectMapper = new ObjectMapper();
    }

    @Test
    void convert_ShouldReturnToolList_ForValidOpenApiJson() throws McpServerToolInitializeException {
        // Arrange: simple OpenAPI JSON with one GET /users path
        ObjectNode openApiJson = objectMapper.createObjectNode();
        openApiJson.put("openapi", "3.0.0");

        ObjectNode paths = objectMapper.createObjectNode();
        ObjectNode getOp = objectMapper.createObjectNode();
        getOp.put("operationId", "getUsers");
        paths.set("/users", objectMapper.createObjectNode().set("get", getOp));
        openApiJson.set("paths", paths);

        ToolOverridesConfig overrides = new ToolOverridesConfig(); // empty overrides

        // Act
        List<McpSchema.Tool> tools = mapper.convert(openApiJson, overrides);

        // Assert
        assertNotNull(tools);
        assertEquals(1, tools.size());
        McpSchema.Tool tool = tools.getFirst();
        assertEquals("getUsers", tool.name());
        assertEquals("getUsers", tool.title()); // operationId used as fallback
        verify(cacheService).putTool(eq("getUsers"), any(McpSchema.Tool.class));
    }

    @Test
    void convert_ShouldThrowException_WhenPathsMissing() {
        ObjectNode openApiJson = objectMapper.createObjectNode();
        openApiJson.put("openapi", "3.0.0");

        ToolOverridesConfig overrides = new ToolOverridesConfig();

        McpServerToolInitializeException ex = assertThrows(McpServerToolInitializeException.class, () ->
                mapper.convert(openApiJson, overrides)
        );
        assertEquals(ErrorMessage.MISSING_PATH_IN_SPEC, ex.getMessage());
    }

    @Test
    void convert_ShouldSkipTool_WhenOverrideExists() throws McpServerToolInitializeException {
        // Arrange OpenAPI JSON
        ObjectNode openApiJson = objectMapper.createObjectNode();
        openApiJson.put("openapi", "3.0.0");

        ObjectNode paths = objectMapper.createObjectNode();
        ObjectNode getOp = objectMapper.createObjectNode();
        getOp.put("operationId", "skipTool"); // used to generate toolName
        paths.set("/skip", objectMapper.createObjectNode().set("get", getOp));
        openApiJson.set("paths", paths);

        // Arrange override config to skip the tool
        ToolOverridesConfig overrides = new ToolOverridesConfig();
        overrides.setExclude(Set.of("skipTool")); // exact toolName generated by generateToolName()

        // Act
        List<McpSchema.Tool> tools = mapper.convert(openApiJson, overrides);

        // Assert
        assertTrue(tools.isEmpty(), "Tool should be skipped due to exclude list");
        verify(cacheService, never()).putTool(anyString(), any(McpSchema.Tool.class));
    }


    @Test
    void extractInputSchema_ShouldHandleNullSchema() {
        Map<String, Object> result = mapper.extractInputSchema(null);
        assertNotNull(result);
        assertTrue(result.isEmpty());
    }
}
